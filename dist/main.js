(()=>{"use strict";const r=(()=>{const r={};return{subscribe:function(o,e){r[o]||(r[o]=[]),r[o].push(e)},publish:function(o,e){r[o]&&r[o].forEach((r=>{r(e)}))},unsubscribe:function(o,e){if(r[o])for(let n=0;n<r[o].length;n+=1)if(r[o][n]===e)return r[o].splice(n,1),!0;return!1}}})(),o=(()=>{const o=Array.from({length:3},(()=>new Array(3).fill(".")));function e(){let r="";return o.forEach((o=>{r=`${r}${JSON.stringify(o)}\n`})),console.log(r),o}function n(r=o){let e=0,n=0;return r.forEach((r=>{r.forEach((r=>{"X"===r?e+=1:"O"===r&&(n+=1)}))})),e===n?"X":"O"}return{getGrid:e,pickGrid:function(t,i,c,l=o){if(t<0||t>=3||i<0||i>=3)return console.log("%cRow number or col number out of range!","color: red;"),!1;if("."!==l[t][i])return console.log("%cGrid chosen has been occupied!","color: red;"),!1;if(void 0!==c){if("X"!==c&&"O"!==c)return console.log('%cPlayer symbol either "X" or "O" only!',"color:red;"),!1;if(c!==n(l))return console.log("%cNot your turn!","color: red;"),!1}const u=l;return void 0===c&&(c=n(u)),u[t][i]=c,r.publish("afterMove",null),e(),!0},getResult:function(r=o){for(let o=0;o<3;o+=1){const e=r[o][0];if("."!==e)for(let n=1;n<3&&r[o][n]===e;n+=1)if(2===n)return e;const n=r[0][o];if("."!==n)for(let e=1;e<3&&r[e][o]===n;e+=1)if(2===e)return n}if("."!==r[0][0])for(let o=1;o<3&&r[o][o]===r[0][0];o+=1)if(2===o)return r[0][0];if("."!==r[0][2])for(let o=1;o<3&&r[o][2-o]===r[0][2];o+=1)if(2===o)return r[0][2];return!1},resetGrid:function(r=o){const e=r;for(let r=0;r<3;r+=1)for(let o=0;o<3;o+=1)e[r][o]=0}}})();(()=>{let e=!0;r.subscribe("afterMove",(function(){e=!e;const n=o.getResult();n&&(console.log(`%c${n} won!`,"color: greenyellow;"),r.publish("gameEnd",null))}))})(),o.getGrid(),window.gameBoard={pickGrid:o.pickGrid,resetGrid:o.resetGrid}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,