(()=>{"use strict";const r=(()=>{const r={};return{subscribe:function(e,o){r[e]||(r[e]=[]),r[e].push(o)},publish:function(e,o){r[e]&&r[e].forEach((r=>{r(o)}))},unsubscribe:function(e,o){if(r[e])for(let n=0;n<r[e].length;n+=1)if(r[e][n]===o)return r[e].splice(n,1),!0;return!1}}})(),e=(()=>{const e=Array.from({length:3},(()=>new Array(3).fill(".")));function o(){let r="";return e.forEach((e=>{r=`${r}${JSON.stringify(e)}\n`})),console.log(r),e}function n(r){let e=0,o=0;return r.forEach((r=>{r.forEach((r=>{"X"===r?e+=1:"O"===r&&(o+=1)}))})),e===o?"X":"O"}function t(){for(let r=0;r<3;r+=1)for(let o=0;o<3;o+=1)e[r][o]=0}return r.subscribe("gameEnd",t),{getGrid:o,pickGrid:function(t,i,c){if(t<0||t>=3||i<0||i>=3)return console.log("%cRow number or col number out of range!","color: red;"),!1;if("."!==e[t][i])return console.log("%cGrid chosen has been occupied!","color: red;"),!1;if(void 0!==c){if("X"!==c&&"O"!==c)return console.log('%cPlayer symbol either "X" or "O" only!',"color:red;"),!1;if(c!==n(e))return console.log("%cNot your turn!","color: red;"),!1}return void 0===c&&(c=n(e)),e[t][i]=c,r.publish("afterMove",null),o(),!0},getResult:function(r=e){for(let e=0;e<3;e+=1){const o=r[e][0];if("."!==o)for(let n=1;n<3&&r[e][n]===o;n+=1)if(2===n)return o;const n=r[0][e];if("."!==n)for(let o=1;o<3&&r[o][e]===n;o+=1)if(2===o)return n}if("."!==r[0][0])for(let e=1;e<3&&r[e][e]===r[0][0];e+=1)if(2===e)return r[0][0];if("."!==r[0][2])for(let e=1;e<3&&r[e][2-e]===r[0][2];e+=1)if(2===e)return r[0][2];return!1},resetGrid:t}})();(()=>{let o=!0;r.subscribe("afterMove",(function(){o=!o;const n=e.getResult();n&&(console.log(`%c${n} won!`,"color: greenyellow;"),r.publish("gameEnd",null))}))})(),e.getGrid(),window.gameBoard={pickGrid:e.pickGrid,resetGrid:e.resetGrid}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,