(()=>{"use strict";var r;const o=(r={},{subscribe:function(o,n){r[o]||(r[o]=[]),r[o].push(n)},publish:function(o,n){r[o]&&r[o].forEach((function(r){r(n)}))},unsubscribe:function(o,n){if(r[o])for(var e=0;e<r[o].length;e+=1)if(r[o][e]===n)return r[o].splice(e,1),!0;return!1}}),n=function(){var r=Array.from({length:3},(function(){return new Array(3).fill(".")}));function n(){var o="";return r.forEach((function(r){o="".concat(o).concat(JSON.stringify(r),"\n")})),console.log(o),r}function e(r){var o=0,n=0;return r.forEach((function(r){r.forEach((function(r){"X"===r?o+=1:"O"===r&&(n+=1)}))})),o===n?"X":"O"}function i(){for(var o=0;o<3;o+=1)for(var n=0;n<3;n+=1)r[o][n]=0}return o.subscribe("gameEnd",i),{getGrid:n,pickGrid:function(i,c,t){if(i<0||i>=3||c<0||c>=3)return console.log("%cRow number or col number out of range!","color: red;"),!1;if("."!==r[i][c])return console.log("%cGrid chosen has been occupied!","color: red;"),!1;if(void 0!==t){if("X"!==t&&"O"!==t)return console.log('%cPlayer symbol either "X" or "O" only!',"color:red;"),!1;if(t!==e(r))return console.log("%cNot your turn!","color: red;"),!1}return void 0===t&&(t=e(r)),r[i][c]=t,n(),o.publish("afterMove",null),!0},getResult:function(){for(var o=0;o<3;o+=1){var n=r[o][0];if("."!==n)for(var e=1;e<3&&r[o][e]===n;e+=1)if(2===e)return n;var i=r[0][o];if("."!==i)for(var c=1;c<3&&r[c][o]===i;c+=1)if(2===c)return i}if("."!==r[0][0])for(var t=1;t<3&&r[t][t]===r[0][0];t+=1)if(2===t)return r[0][0];if("."!==r[0][2])for(var u=1;u<3&&r[u][2-u]===r[0][2];u+=1)if(2===u)return r[0][2];return!1},resetGrid:i}}();var e;e=!0,o.subscribe("afterMove",(function(){e=!e;var r=n.getResult();r&&(console.log("%c".concat(r," won!"),"color: greenyellow;"),o.publish("gameEnd",null))})),n.getGrid(),window.gameBoard={pickGrid:n.pickGrid,resetGrid:n.resetGrid}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,