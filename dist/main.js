(()=>{"use strict";const r=(()=>{const r={};return{subscribe:function(o,e){r[o]||(r[o]=[]),r[o].push(e)},publish:function(o,e){r[o]&&r[o].forEach((r=>{r(e)}))},unsubscribe:function(o,e){if(r[o])for(let n=0;n<r[o].length;n+=1)if(r[o][n]===e)return r[o].splice(n,1),!0;return!1}}})(),o=(()=>{const o=Array.from({length:3},(()=>new Array(3).fill(".")));function e(){let r="";return o.forEach((o=>{r=`${r}${JSON.stringify(o)}\n`})),console.log(r),o}function n(r=o){let e=0,n=0;return r.forEach((r=>{r.forEach((r=>{"X"===r?e+=1:"O"===r&&(n+=1)}))})),e===n?"X":"O"}return{getGrid:e,pickGrid:function(t,i,u,f=o){if(t<0||t>=3||i<0||i>=3)return console.log("Row number or col number out of range!"),!1;if("."!==f[t][i])return console.log("Grid chosen has been occupied!"),!1;if(void 0!==u){if("X"!==u||"O"!==u)return console.log('Player symbol either "X" or "O" only!'),!1;if(u!==n(f))return console.log("Not your turn!"),!1}const l=f;return void 0===u&&(u=n(l)),l[t][i]=u,r.publish("afterMove",null),e(),!0},getResult:function(r=o){for(let o=0;o<3;o+=1){const e=r[o][0];if("."!==e)for(let n=1;n<3&&r[o][n]===e;n+=1)if(2===n)return e;const n=r[0][o];if("."!==n)for(let e=1;e<3&&r[e][o]===n;e+=1)if(2===e)return n}if("."!==r[0][0])for(let o=1;o<3&&r[o][o]===r[0][0];o+=1)if(2===o)return r[0][0];if("."!==r[0][2])for(let o=1;o<3&&r[o][2-o]===r[0][2];o+=1)if(2===o)return r[0][2];return!1},resetGrid:function(r=o){const e=r;for(let r=0;r<3;r+=1)for(let o=0;o<3;o+=1)e[r][o]=0}}})();(()=>{let e=!0;r.subscribe("afterMove",(function(){e=!e;const r=o.getResult();r&&console.log(`${r} won!`)}))})(),console.log(o.getResult([["0",2,"2"],[".","2","."],["2","0","1"]])),o.getGrid(),window.gameBoard=o})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,